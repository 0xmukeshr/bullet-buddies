/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OneVsOneBlackRoomInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkStatus"
      | "enemy"
      | "enemyAlive"
      | "enemyWins"
      | "gamesPlayed"
      | "getGameStats"
      | "isGameOver"
      | "killEnemy"
      | "killPlayer"
      | "player"
      | "playerAlive"
      | "playerWins"
      | "resetGame"
      | "spawnEnemy"
      | "spawnPlayer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EnemyKilled"
      | "EnemySpawned"
      | "GameReset"
      | "PlayerKilled"
      | "PlayerSpawned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "enemy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enemyAlive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "enemyWins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gamesPlayed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameOver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "killEnemy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "killPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerAlive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerWins",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spawnEnemy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnPlayer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enemy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enemyAlive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enemyWins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gamesPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGameOver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killEnemy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "killPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerAlive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerWins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spawnEnemy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spawnPlayer",
    data: BytesLike
  ): Result;
}

export namespace EnemyKilledEvent {
  export type InputTuple = [enemy: AddressLike];
  export type OutputTuple = [enemy: string];
  export interface OutputObject {
    enemy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnemySpawnedEvent {
  export type InputTuple = [enemy: AddressLike];
  export type OutputTuple = [enemy: string];
  export interface OutputObject {
    enemy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerKilledEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerSpawnedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OneVsOneBlackRoom extends BaseContract {
  connect(runner?: ContractRunner | null): OneVsOneBlackRoom;
  waitForDeployment(): Promise<this>;

  interface: OneVsOneBlackRoomInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkStatus: TypedContractMethod<
    [],
    [[boolean, boolean] & { playerStatus: boolean; enemyStatus: boolean }],
    "view"
  >;

  enemy: TypedContractMethod<[], [string], "view">;

  enemyAlive: TypedContractMethod<[], [boolean], "view">;

  enemyWins: TypedContractMethod<[], [bigint], "view">;

  gamesPlayed: TypedContractMethod<[], [bigint], "view">;

  getGameStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & { total: bigint; pWins: bigint; eWins: bigint }
    ],
    "view"
  >;

  isGameOver: TypedContractMethod<[], [boolean], "view">;

  killEnemy: TypedContractMethod<[], [void], "nonpayable">;

  killPlayer: TypedContractMethod<[], [void], "nonpayable">;

  player: TypedContractMethod<[], [string], "view">;

  playerAlive: TypedContractMethod<[], [boolean], "view">;

  playerWins: TypedContractMethod<[], [bigint], "view">;

  resetGame: TypedContractMethod<[], [void], "nonpayable">;

  spawnEnemy: TypedContractMethod<[_enemy: AddressLike], [void], "nonpayable">;

  spawnPlayer: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkStatus"
  ): TypedContractMethod<
    [],
    [[boolean, boolean] & { playerStatus: boolean; enemyStatus: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "enemy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enemyAlive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "enemyWins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gamesPlayed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & { total: bigint; pWins: bigint; eWins: bigint }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isGameOver"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "killEnemy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "killPlayer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "player"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerAlive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerWins"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spawnEnemy"
  ): TypedContractMethod<[_enemy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spawnPlayer"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EnemyKilled"
  ): TypedContractEvent<
    EnemyKilledEvent.InputTuple,
    EnemyKilledEvent.OutputTuple,
    EnemyKilledEvent.OutputObject
  >;
  getEvent(
    key: "EnemySpawned"
  ): TypedContractEvent<
    EnemySpawnedEvent.InputTuple,
    EnemySpawnedEvent.OutputTuple,
    EnemySpawnedEvent.OutputObject
  >;
  getEvent(
    key: "GameReset"
  ): TypedContractEvent<
    GameResetEvent.InputTuple,
    GameResetEvent.OutputTuple,
    GameResetEvent.OutputObject
  >;
  getEvent(
    key: "PlayerKilled"
  ): TypedContractEvent<
    PlayerKilledEvent.InputTuple,
    PlayerKilledEvent.OutputTuple,
    PlayerKilledEvent.OutputObject
  >;
  getEvent(
    key: "PlayerSpawned"
  ): TypedContractEvent<
    PlayerSpawnedEvent.InputTuple,
    PlayerSpawnedEvent.OutputTuple,
    PlayerSpawnedEvent.OutputObject
  >;

  filters: {
    "EnemyKilled(address)": TypedContractEvent<
      EnemyKilledEvent.InputTuple,
      EnemyKilledEvent.OutputTuple,
      EnemyKilledEvent.OutputObject
    >;
    EnemyKilled: TypedContractEvent<
      EnemyKilledEvent.InputTuple,
      EnemyKilledEvent.OutputTuple,
      EnemyKilledEvent.OutputObject
    >;

    "EnemySpawned(address)": TypedContractEvent<
      EnemySpawnedEvent.InputTuple,
      EnemySpawnedEvent.OutputTuple,
      EnemySpawnedEvent.OutputObject
    >;
    EnemySpawned: TypedContractEvent<
      EnemySpawnedEvent.InputTuple,
      EnemySpawnedEvent.OutputTuple,
      EnemySpawnedEvent.OutputObject
    >;

    "GameReset()": TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;
    GameReset: TypedContractEvent<
      GameResetEvent.InputTuple,
      GameResetEvent.OutputTuple,
      GameResetEvent.OutputObject
    >;

    "PlayerKilled(address)": TypedContractEvent<
      PlayerKilledEvent.InputTuple,
      PlayerKilledEvent.OutputTuple,
      PlayerKilledEvent.OutputObject
    >;
    PlayerKilled: TypedContractEvent<
      PlayerKilledEvent.InputTuple,
      PlayerKilledEvent.OutputTuple,
      PlayerKilledEvent.OutputObject
    >;

    "PlayerSpawned(address)": TypedContractEvent<
      PlayerSpawnedEvent.InputTuple,
      PlayerSpawnedEvent.OutputTuple,
      PlayerSpawnedEvent.OutputObject
    >;
    PlayerSpawned: TypedContractEvent<
      PlayerSpawnedEvent.InputTuple,
      PlayerSpawnedEvent.OutputTuple,
      PlayerSpawnedEvent.OutputObject
    >;
  };
}
